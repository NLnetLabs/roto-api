use std::io::Write;

fn get_out_dir() -> Result<String, std::ffi::OsString> {
    std::env::var_os("OUT_DIR")
        .ok_or_else(std::ffi::OsString::new)?
        .into_string()
}

fn main() {
    println!("cargo:rerun-if-env-changed=CARGO_PKG_VERSION");

    // Create a version.rs file in the output directory, that takes
    // the Cargo.toml package version.
    // This is used by the /status endpoint to report the version.
    let version = env!("CARGO_PKG_VERSION");

    let version_file_path: std::path::PathBuf;
    if let Ok(out_dir) = get_out_dir() {
        version_file_path = std::path::Path::new(&out_dir).join("version.rs".to_string());
    } else {
        panic!("in the streets of London.");
    };

    // (re)create the rs file output file.
    let mut version_file_buf = std::fs::File::create(&version_file_path).unwrap();

    version_file_buf
        .write_all(
            format!(
                "\n//autogenerated by build.rs\npub fn version() -> String {{ \"{}\".to_string() }}",
                version
            )
            .as_bytes(),
        )
        .unwrap();
}
